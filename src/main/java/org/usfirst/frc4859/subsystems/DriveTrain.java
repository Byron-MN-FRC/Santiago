// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package org.usfirst.frc4859.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leftFront;
private WPI_TalonSRX rightFront;
private DifferentialDrive tankDrive;
private WPI_TalonSRX leftBack;
private WPI_TalonSRX rightBack;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFront = new WPI_TalonSRX(2);
 
 

rightFront = new WPI_TalonSRX(4);
 
 

tankDrive = new DifferentialDrive(leftFront, rightFront);
 addChild("TankDrive",tankDrive);
 tankDrive.setSafetyEnabled(false);
tankDrive.setExpiration(0.1);
tankDrive.setMaxOutput(1.0);


leftBack = new WPI_TalonSRX(1);
 
 

rightBack = new WPI_TalonSRX(3);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    rightBack.follow(rightFront);
    leftBack.setInverted(true);
    leftFront.setInverted(true);
    leftBack.follow(leftFront);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void driveStop() {
		tankDrive.arcadeDrive(0, 0);
	}
    
    public void driveWithJoystick(Joystick joystickP0) {

		tankDrive.arcadeDrive( -joystickP0.getY(), -joystickP0.getTwist());
	}
} 



